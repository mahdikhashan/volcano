// Code generated by MockGen. DO NOT EDIT.
// Source: tc.go
//
// Generated by this command:
//
//	mockgen -destination ./mocks/mock_tc.go -package mocks -source tc.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTC is a mock of TC interface.
type MockTC struct {
	ctrl     *gomock.Controller
	recorder *MockTCMockRecorder
	isgomock struct{}
}

// MockTCMockRecorder is the mock recorder for MockTC.
type MockTCMockRecorder struct {
	mock *MockTC
}

// NewMockTC creates a new mock instance.
func NewMockTC(ctrl *gomock.Controller) *MockTC {
	mock := &MockTC{ctrl: ctrl}
	mock.recorder = &MockTCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTC) EXPECT() *MockTCMockRecorder {
	return m.recorder
}

// AddFilter mocks base method.
func (m *MockTC) AddFilter(netns, ifName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilter", netns, ifName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilter indicates an expected call of AddFilter.
func (mr *MockTCMockRecorder) AddFilter(netns, ifName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilter", reflect.TypeOf((*MockTC)(nil).AddFilter), netns, ifName)
}

// PreAddFilter mocks base method.
func (m *MockTC) PreAddFilter(netns, ifName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreAddFilter", netns, ifName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreAddFilter indicates an expected call of PreAddFilter.
func (mr *MockTCMockRecorder) PreAddFilter(netns, ifName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreAddFilter", reflect.TypeOf((*MockTC)(nil).PreAddFilter), netns, ifName)
}

// RemoveFilter mocks base method.
func (m *MockTC) RemoveFilter(netns, ifName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilter", netns, ifName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilter indicates an expected call of RemoveFilter.
func (mr *MockTCMockRecorder) RemoveFilter(netns, ifName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilter", reflect.TypeOf((*MockTC)(nil).RemoveFilter), netns, ifName)
}
